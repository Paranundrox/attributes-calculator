import tkinter as tk


if __name__ == "__main__":
    entries = [[],[],[],[]]

    def attrFetch(category, index):
        if category == 'bat':
            result = float(entries[0][index].get())
        elif category == 'pitch':
            result = float(entries[1][index].get())
        elif category == 'base':
            result = float(entries[2][index].get())
        elif category == 'def':
            result = float(entries[3][index].get())
        return result

    def calcBatting():
        batStars = round(10*pow(attrFetch('bat', 0), 0.35) * pow(attrFetch('bat', 1), 0.35)* pow(max(1 - attrFetch('bat', 2), 0.01), 0.05) * pow(max(1 - attrFetch('bat', 3), 0.01), 0.05) * pow(attrFetch('bat', 4), 0.075) * pow(attrFetch('bat', 5), 0.075) * pow(attrFetch('bat', 6), 0.02))/2
        batStarsText = tk.Label(gui, height=1, width=15, background='light blue', anchor='center', padx=1, pady=1, text=batStars)
        batStarsText.grid(row=0, column=(9))
    def calcPitching():
        pitchStars = round(10*pow(attrFetch('pitch', 0), 0.4) * pow(attrFetch('pitch',1), 0.5) * pow(attrFetch('pitch',2), 0.15) * pow(attrFetch('pitch',3), 0.1) * pow(attrFetch('pitch',4), 0.025))/2
        pitchStarsText = tk.Label(gui, height=1, width=15, background='light blue', anchor='center', padx=1, pady=1, text=pitchStars)
        pitchStarsText.grid(row=2, column=(9))
    def calcBaserunning():
        baseStars = round(10*pow(attrFetch('base', 0), 0.5) * pow(attrFetch('base', 1), 0.1) * pow(attrFetch('base', 2), 0.1) * pow(attrFetch('base', 3), 0.1) * pow(attrFetch('base', 4), 0.1))/2
        baseStarsText = tk.Label(gui, height=1, width=15, background='light blue', anchor='center', padx=1, pady=1, text=baseStars)
        baseStarsText.grid(row=4, column=(9))
    def calcDefense():
        defStars = round(10*pow(attrFetch('def', 0), 0.2) * pow(attrFetch('def', 1), 0.2) * pow(attrFetch('def', 2), 0.1) * pow(attrFetch('def', 3), 0.1) * pow(attrFetch('def', 4), 0.1))/2
        defStarsText = tk.Label(gui, height=1, width=15, background='light blue', anchor='center', padx=1, pady=1, text=defStars)
        defStarsText.grid(row=6, column=(9))

    gui = tk.Tk()
    gui.configure(background='light blue')
    gui.title('Stars Calculator')
    gui.geometry('1100x200')

    battingAttrs = ['Thwackability', 'Divinity', 'Patheticism', 'Tragicness', 'Musclitude', 'Moxie', 'Martyrdom', 'Buoyancy']
    pitchingAttrs = ['Ruthlessness', 'Unthwackability', 'Overpowerment', 'Shakespearianism', 'Coldness', 'Suppression']
    baserunningAttrs = ['Laserlikeness', 'Continuation', 'Base Thirst', 'Ground Friction', 'Indulgence']
    defenseAttrs = ['Omniscience', 'Tenaciousness', 'Chasiness', 'Watchfulness', 'Anticapitalism']
    attributes = [battingAttrs, pitchingAttrs, baserunningAttrs, defenseAttrs]

    calc = [['Batting Stars', lambda:calcBatting()], ['Pitching Stars', lambda: calcPitching()], ['Baserunning Stars', lambda: calcBaserunning()], ['Defense Stars', lambda: calcDefense()]]

    for typeIndex, attrType in enumerate(attributes):
        row=(2*typeIndex) 
        calcButtons = tk.Button(gui, text=calc[typeIndex][0], fg='black', bg='light blue', command=calc[typeIndex][1], height=1, width=15)
        calcButtons.grid(sticky='S', row=row, column=0)
        for attrIndex, attr in enumerate(attrType):
            attrBut = tk.Entry(gui, width=5)
            attrBut.insert('insert', '0.5')
            attrBut.grid(row=row, column=(attrIndex+1))
            attrText = tk.Label(gui, height=1, width=15, background='light blue', anchor='center', padx=1, pady=1, text=attr)
            attrText.grid(row=row+1, column=(attrIndex+1))
            entries[typeIndex].append(attrBut)
        starsText = tk.Label(gui, height=1, width=15, background='light blue', anchor='center', padx=1, pady=1, text='Stars')
        starsText.grid(row=row+1, column=(9))

    gui.mainloop()

